managed implementation in class zbp_dmo_partner_i unique;
strict ( 2 );

define behavior for YDMO_PARTNER_I alias PartnerBDI
persistent table ydmo_partner_db
lock master
authorization master ( instance )
late numbering
//etag master <field_name>
{
  create ( authorization : global );
  update;
  delete;
  field ( readonly ) PartnerNumber;
  //Validations belong to the behavioral definition of a business object and are defined at the corresponding entity,
  //where they should also apply. They are triggered when the data is saved and can be registered for the individual
  //events such as create, update and delete.
  //Furthermore, there is also the possibility that a validation is only triggered when a single field is changed
  validation validateCoreData on save { create; field Country, PaymentCurrency; }

  //we need to comment out the implementation of the validateKeyIsFilled method.
  //The key is no longer assigned externally, but only in the storage sequence.
  //Because validation is called before the sequence, validation would hinder the save operation.
  validation validateKeyIsFilled on save { create; }

  //A determination only has to be defined at the level of the interface, since it applies at all times and
  // does not have to and cannot be given to the outside in the projection layer.
  determination fillCurrency on modify { create; update; }

  //think of actions is as buttons on an interface, you can trigger them externally and they perform different steps.
  //The normal action is initially inactive and can only be used once one or more records in the list have been selected. The action is only performed on this record.
  action fillEmptyStreets result [1] $self;
  //The second action is always active because it affects the entire object and is not dependent on a selected data record.
  //The action is correspondingly different, because here we have to read all the keys ourselves from the database and are not handed them over.
  static action clearAllEmptyStreets;

  //method generates an instance of the current entity, which can happen when copying
  factory action copyLine [1];

  //Action for popup
  static action withpopup parameter ydmo_popup;

  mapping for ydmo_partner_db
    {
      PartnerNumber      = partner;
      PartnerName        = name;
      Street             = street;
      City               = city;
      Country            = country;
      PaymentCurrency    = payment_currency;
      ChangedAt          = changed_at;
      ChangedBy          = changed_by;
      CreatedAt          = created_at;
      CreatedBy          = created_by;
      LocalLastChangedAt = local_last_changed_at;
    }
}